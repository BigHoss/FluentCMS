@page "/{*Route:nonfile}"
@using System.Text.RegularExpressions
@using System.Web
@inject HttpClient http
@inject NavigationManager Navigator
@implements IDisposable


<PageTitle>@AppState?.Page?.Title</PageTitle>

<HeadContent>
    @if (!string.IsNullOrEmpty(AppState?.Layout?.Head))
    {
        @((MarkupString)AppState.Layout.Head)
    }
</HeadContent>

<h1>Route: @Route, Navigator: @Navigator.Uri</h1>
<p role="status">Current count: @currentCount</p>
<Counter @onclick="IncrementCount">Click me</Counter>


<CascadingValue Value="@AppState">
@* <Section Name="main" /> *@
@dynamicComponent()
</CascadingValue>

@code {

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }

    [Parameter]
    public string? Route { get; set; }

    public AppState? AppState { get; set; }

    private string _layout = string.Empty;

    void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
        // StateHasChanged();
    }

    public void Dispose()
    {
        Navigator.LocationChanged -= OnLocationChanged;
    }
    protected override Task OnInitializedAsync()
    {
        Navigator.LocationChanged += OnLocationChanged;
        AppState = new AppState
            {
                Host = Navigator.BaseUri.EndsWith("/") ? Navigator.BaseUri.Remove(Navigator.BaseUri.Length - 1) : Navigator.BaseUri,
                Uri = new Uri(Navigator.Uri),
            };

        // var siteResult = http.GetFromJsonAsync<ApiResult<SiteResponse>>($"Site/GetByUrl?url={AppState.Host}").GetAwaiter().GetResult();
        // AppState.Site = siteResult?.Data;
        // AppState.Layout = AppState.Site?.Layout;

        // if (AppState.Site != null)
        // {
        //     var query = HttpUtility.ParseQueryString(string.Empty);
        //     query["siteId"] = AppState.Site.Id.ToString();
        //     query["path"] = AppState.Uri.LocalPath;

        //     var pageResult = http.GetFromJsonAsync<ApiResult<PageResponse>>($"Page/GetByPath?{query}").GetAwaiter().GetResult();
        //     AppState.Page = pageResult?.Data;
        //     if (AppState.Page != null && AppState.Page.Layout != null)
        //         AppState.Layout = AppState.Page.Layout;
        // }
        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        AppState.Host = Navigator.BaseUri.EndsWith("/") ? Navigator.BaseUri.Remove(Navigator.BaseUri.Length - 1) : Navigator.BaseUri;
        AppState.Uri = new Uri(Navigator.Uri);

        var siteResult = http.GetFromJsonAsync<ApiResult<SiteResponse>>($"Site/GetByUrl?url={AppState.Host}").GetAwaiter().GetResult();
        AppState.Site = siteResult?.Data;
        AppState.Layout = AppState.Site?.Layout;

        if (AppState.Site != null)
        {
            var query = HttpUtility.ParseQueryString(string.Empty);
            query["siteId"] = AppState.Site.Id.ToString();
            query["path"] = AppState.Uri.LocalPath;

            var pageResult = http.GetFromJsonAsync<ApiResult<PageResponse>>($"Page/GetByPath?{query}").GetAwaiter().GetResult();
            AppState.Page = pageResult?.Data;
            if (AppState.Page != null && AppState.Page.Layout != null)
                AppState.Layout = AppState.Page.Layout;
        }

        return base.OnParametersSetAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override bool ShouldRender()
    {
        return base.ShouldRender();
    }

    RenderFragment dynamicComponent() => builder =>
       {
           var _type = GetType("Section");
           if (_type == null)
               return;

           builder.OpenComponent(1, _type);
           builder.AddComponentParameter(2, "Name", "main");
           // builder.AddComponentParameter(3, "AppState", AppState);
           builder.CloseComponent();

           return;

           var index = 0;
           var startIndex = 0;
           var lastIndex = 0;
           var lastLength = 0;

           // ignore comments before trying to parse
           var commentRegex = new Regex("<!--.*-->");
           _layout = commentRegex.Replace(_layout, "");

           // attribute to find tags with
           var matcherAttributeName = "fluentcms";

           // find any tag that has our attribute
           var tagFinderRegex = new Regex($"<(?<TagName>\\w+)[^/>]*{matcherAttributeName}[^/>]*/>", RegexOptions.IgnoreCase);

           var tagMatches = tagFinderRegex.Matches(_layout);

           // ignore if no tags found
           if (tagMatches.Count() == 0)
           {
               builder.AddMarkupContent(0, _layout);
               return;
           }

           foreach (Match tag in tagMatches)
           {
               // add markup until beginning of tag-match
               builder.AddMarkupContent(index++, _layout.Substring(startIndex, tag.Index - startIndex));

               // get Type from tag name
               var type = GetType(tag.Groups["TagName"].Value);

               if (type != null)
               {
                   // open component tag
                   builder.OpenComponent(index++, type);

                   //parse attributes with regex
                   var parameters = ParseAttributes(tag.Value);

                   //add parameters
                   foreach (var parameter in parameters)
                       builder.AddComponentParameter(index++, parameter.Key, parameter.Value);

                   //close component
                   builder.CloseComponent();
                   startIndex = tag.Index + tag.Length;
                   lastIndex = tag.Index;
                   lastLength = tag.Length;
               }
           }

           builder.AddMarkupContent(index, _layout.Substring(lastIndex + lastLength));
           index++;
       };

    private Type? GetType(string typeName)
    {
        var assembly = typeof(Section).Assembly;
        var typeInfo = assembly.DefinedTypes.FirstOrDefault(x => x.Name == typeName);
        return typeInfo?.AsType();
    }

    private Dictionary<string, string> ParseAttributes(string layout)
    {
        var parameterParserRegex = new Regex("(\\s(?<name>\\w+)=\\\"?(?<value>\\w+)\\\"?)+");
        return new Dictionary<string, string>(parameterParserRegex.Matches(layout).Select(x => new KeyValuePair<string, string>(x.Groups["name"].Value, x.Groups["value"].Value)));
    }
}
