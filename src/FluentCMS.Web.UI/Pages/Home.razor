@page "/{*Route:nonfile}"
@using System.Text.RegularExpressions
@using System.Web
@inject HttpClient http
@inject NavigationManager Navigator

<PageTitle>@Page?.Title</PageTitle>

@dynamicComponent()

@code {
    [Parameter]
    public string? Route { get; set; }

    public SiteResponse? Site { get; set; }
    public PageResponse? Page { get; set; }
    public string Layout { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        var host = Navigator.BaseUri;
        if (host.EndsWith("/"))
            host = host.Substring(0, host.Length - 1);

        var siteResult = http.GetFromJsonAsync<ApiResult<SiteResponse>>($"Site/GetByUrl?url={host}").GetAwaiter().GetResult();
        Site = siteResult?.Data;

        if (Site is null)
            return;

        if (Route is null)
            Route = string.Empty;

        var query = HttpUtility.ParseQueryString(string.Empty);
        query["siteId"] = Site.Id.ToString();
        query["path"] = Route;

        var pageResult = http.GetFromJsonAsync<ApiResult<PageResponse>>($"Page/GetByPath?{query.ToString()}").GetAwaiter().GetResult();
        Page = pageResult?.Data;
        if (Page is null)
            return;

        Layout = Page.Layout?.Content ?? Site.Layout.Content;
    }
    private Dictionary<string, string> ParseParameters(string layout)
    {
        var parameterParserRegex = new Regex("(\\s(?<name>\\w+)=\\\"?(?<value>\\w+)\\\"?)+");
        return new Dictionary<string, string>(parameterParserRegex.Matches(layout).Select(x => new KeyValuePair<string, string>(x.Groups["name"].Value, x.Groups["value"].Value)));
    }
    RenderFragment dynamicComponent() => builder =>
       {
           var index = 0;
           var startIndex = 0;
           var lastIndex = 0;
           var lastLength = 0;

           // attribute to find tags with
           var matcherAttributeName = "fluentcms";

           // find any tag that has our attribute
           // TODO: check that tag is not commented
           var tagFinderRegex = new Regex($"<(?<TagName>\\w+)[^/>]*{matcherAttributeName}[^/>]*/>", RegexOptions.IgnoreCase);

           var tagMatches = tagFinderRegex.Matches(Layout);

           // ignore if no tags found
           if (tagMatches.Count() == 0)
               return;

           foreach (Match tag in tagMatches)
           {
               // add markup until beginning of tag-match
               builder.AddMarkupContent(index++, Layout.Substring(startIndex, tag.Index - startIndex));
               // get Type from tag name
               // Type tagType = Type.GetType(tag.Groups["TagName"].Value);
               Type tagType = tag.Groups["TagName"].Value.ToLower() switch
               {
                   "section" => typeof(Section),
                   "sidebar" => typeof(Sidebar),
                   _ => null
               };

               // open component tag
               builder.OpenComponent(index++, tagType);

               //parse parameters with regex
               var parameters = ParseParameters(tag.Value);

               //add parameters
               var parameterIndex = 0;
               foreach (var parameter in parameters)
               {
                   builder.AddComponentParameter(parameterIndex++, parameter.Key, parameter.Value);
               }

               //add page parameter if the component has a page parameter that is Type of PageResponse
               if (tagType.GetProperty("Page") is var property &&
                   property != null &&
                   property.PropertyType == typeof(PageResponse))
               {

                   builder.AddComponentParameter(parameterIndex++, "page", Page);
               }

               //close component
               builder.CloseComponent();
               startIndex = tag.Index + tag.Length;
               lastIndex = tag.Index;
               lastLength = tag.Length;
           }

           builder.AddMarkupContent(index, Layout.Substring(lastIndex + lastLength));
           index++;
       };
}
