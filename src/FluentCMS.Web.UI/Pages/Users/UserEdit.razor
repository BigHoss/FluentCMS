@page "/users/create"
@page "/users/edit/{Id:guid}"
@inject HttpClient _httpClient
@inject NavigationManager _navigationManager

<h3>@(Id.HasValue ? "Edit" : "Create") User</h3>

<EditForm Model="data" OnValidSubmit="ValidSubmit">
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText type="text" class="form-control" required @bind-Value="data.Name" name="name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Username</label>
        <InputText type="text" class="form-control" required @bind-Value="data.Username" name="username" />
    </div>
    <div class="mb-3">
        <label class="form-label">Password</label>
        <InputText type="password" class="form-control" required @bind-Value="data.Password" name="password" />
    </div>
    <div>
        <Label Class="form-label">Roles:</Label>
        @if (roles == null)
        {
            <span>Loading user roles...</span>
        }
        else
        {
            foreach (var r in roles)
            {
                <div class="form-check">
                    <input class="form-check-input"
                           type="checkbox"
                           id="@("chkRole-" + r.Name)"
                           @onchange="e => onRoleCheckboxChanged((bool)e.Value!, r.Id)"
                           @attributes="addCheckedAttribute(data.Roles.Any(x => x == r.Id))">
                    <label class="form-check-label" for="@("chkRole-" + r.Name)">
                        @r.Name <span class="fw-light">(@r.Description)</span>
                    </label>
                </div>
            }
        }
    </div>

    <Button Type="submit" Color="Colors.Primary">Save</Button>
</EditForm>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private IEnumerable<FluentCMS.Entities.Users.Role>? roles;
    private Application.Users.CreateUserCommand data = new();

    protected override async Task OnInitializedAsync()
    {
        var getRolesResponse = await _httpClient.GetFromJsonAsync<ApiResult<IEnumerable<FluentCMS.Entities.Users.Role>>>("roles");
        if (getRolesResponse != null && getRolesResponse.IsSuccess)
        {
            roles = getRolesResponse.Data;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (Id.HasValue)
        {
            try
            {
                var response = await _httpClient.GetFromJsonAsync<ApiResult<FluentCMS.Entities.Users.User>>($"users/{Id.Value}");
                if (response != null && response.IsSuccess)
                {
                    data.Name = response.Data!.Name;
                    data.Username = response.Data!.Username;
                    data.Password = response.Data!.Password;
                    data.Roles = response.Data.UserRoles.Select(r => r.RoleId).ToList();
                }
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    public async Task ValidSubmit()
    {
        //Create
        if (Id.HasValue == false)
        {
            try
            {
                await _httpClient.PostAsJsonAsync($"users", data);
                _navigationManager.NavigateTo("/users");
            }
            catch (Exception)
            {
                throw;
            }
        }
        //Edit
        else
        {
            var editCommand = new Application.Users.EditUserCommand
                {
                    Id = Id.Value,
                    Name = data.Name,
                    Username = data.Username,
                    Password = data.Password,
                    Roles = data.Roles,
                };
            try
            {
                await _httpClient.PutAsJsonAsync($"users", editCommand);
                _navigationManager.NavigateTo("/users");
            }
            catch (Exception)
            {
                throw;
            }
        }
    }

    private Dictionary<string, object> addCheckedAttribute(bool isChecked) =>
        new Dictionary<string, object>() { ["checked"] = isChecked };

    private void onRoleCheckboxChanged(bool isChecked, Guid roleId)
    {
        if (isChecked)
        {
            if (data.Roles.Any(x => x == roleId) == false)
                data.Roles.Add(roleId);
        }
        else
        {
            data.Roles.Remove(roleId);
        }
    }
}
