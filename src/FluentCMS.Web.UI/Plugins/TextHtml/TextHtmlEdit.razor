@using System.Text.Json
@using System.Text
@inject HttpClient http

<textarea id="textHtmlContent" rows="5" placeholder="Enter you TextHtml content here" @bind=textHtmlContent></textarea>
<br />
<Button @onclick="OnUpdate">Update</Button>
<a href="@AppState?.Page?.Path">Go Back</a>

@code {
    [CascadingParameter(Name = "Plugin")]
    public PluginResponse? Plugin { get; set; }

    [CascadingParameter]
    public AppState? AppState { get; set; }

    private PluginContent PluginContent = new();
    private string textHtmlContent = string.Empty;

    protected override Task OnInitializedAsync()
    {
        PluginContent = new PluginContent{
            { "SiteId", AppState?.Site?.Id },
            { "PluginId", Plugin?.Id }
        };
        return base.OnInitializedAsync();
    }

    private async Task OnUpdate()
    {
        PluginContent["Content"] = textHtmlContent;
        var serializerOptions = new JsonSerializerOptions();
        var response = await http.PostAsJsonAsync("PluginContent/TextHtml/Create", PluginContent, serializerOptions);
        var pluginContentResult = await response.Content.ReadFromJsonAsync<ApiResult<PluginContent>>();
        textHtmlContent = pluginContentResult?.Data?["Content"]?.ToString() ?? string.Empty;
    }

    public static Task<HttpResponseMessage> PostJsonAsync(HttpClient httpClient, string url, object body)
    {
        var bodyJson = JsonSerializer.Serialize(body);
        var stringContent = new StringContent(bodyJson, Encoding.UTF8, "application/json");
        return httpClient.PostAsync(url, stringContent);
    }
}
